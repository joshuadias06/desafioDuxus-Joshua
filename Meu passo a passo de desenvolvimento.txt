1º Commit.
1- Rodei o projeto na minha máquina.
2- Inclui o H2 DB como banco de dados a ser usado no projeto.
3-Decisão do tema do "Cartola".E-sports{Valorant, Fortnite, CSGO, Apex, COD, FIFA, LOL,...} 

2º Commit.
4- Criação do método TimeDaData.
5- Verifiquei sobre os teste da primeira função que esperava um tipo de retorno (Time) e minha função retornou uma lista.
Isso na pasta ~test. A área de teste não foi uma área que nunca havia estudei profundamente, sempre fazia os testes por tentativa de execução.

3ºCommit.
6-Criação do método IntegranteMaisUsado.
7-Criação do método TimeMaisComum (foi possível reutilizar a logica de filtrar data do método anterior, porém este método retorna uma lista).
8-Criação do método funcaoMaisComum(Este já foi possivel reutilizar quase 100% do método IntegranteMaisUsado).
9-Criação do método franquiaMaisFamosa(Este também foi possivel reutilizar o código anterior mudando apenas o que estou buscando que é a franquia mais famosa).
10-Criação do método contagemPorFranquia(Este método foi mais simples conseguir usar o "header" do método franquiaMaisFamosa e ele me retorna um Map com String e Long = Franquia e QtdIntegrantes).
11-Criação do método contagemPorFuncao(Da mesma forma esse método foi código reutilizado do "header" do método funcaoMaisComum).

4ºCommit.
12-Inicio da API de Cadastro de Integrantes. 
13-Criação da IntegranteRepository e IntegranteService.(Este passo usei como referência meu Projeto Integrador do semestre passado(microsserviços - CondoConnect).
14-Criação da Controller com os endpoints de cadastro de integrante.(Este passo usei como referência meu Projeto Integrador do semestre passado(microsserviços - CondoConnect), crei um método CREATE e um READ um para criar e o outro para ler com o objetivo de verificar a crição.
15-Teste de requisição para cadastro de Integrante usando o Insomnia. (Sucesso na criação de integrante status da requisição 201 Created, e sucesso para listar os já cadastrados). 
16-Criei uma classe para implementar 10 integrantes assim que rodar a aplicação(Por conta que estou usando o H2 Data Base).

5ºCommit.
17-Inicio da API de Cadastro de Times.
18-Criação da TimeRepository e TimeService.
19-Criação da Controller com os endpoints de cadastro de integrante.(Este foi muito mais complicado que o de integrante pois o time é uma lista de integrantes e para instânciar a criação dele tive que criar uma DTO data transfer object).

6ºCommit.
20-Ajuste de erro na classe que sube para o banco integrantes asssim que a aplicação roda.
21-Criação da tela de cadastro de integrantes(HTML,CSS,JS).
22-Feito um Form com 3 campos (Franquia, Nome, Função).
23-Criado um menu simples para navegar entre o cadastro de times e tela de métodos.
24-Feito em JS o fetch para mandar para a API os dados do formulário em formato JSON.
25-Teste do fetch(1º Tentativa erro, foi preciso adicionar o Cross Origin na controler de cadastro para qualquer endereço conseguir fazer requisições, 2º tentativa = "sucesso!").

7ºCommit.
26-Neste commit tive a experiência mais complexas com StackOverFlow pois ao mandar o fetch do front-end criando um time o código quebrava, fui pesquisar sobre o erro e consegui descobrir uma anotação que resolve esse problema da biblioteca Jackson, que foi disponibilizado pela empresa no material de apoio.
27-Criação da tela de criação de time(ela lista o time e tem um input de data para selecionar a data de criação).
28-Tive que resolver um erro de requisição POST que estava dando ao enviar para a API os dados.
29-No início da construção da criação de time não estava sendo cadastrado os integrantes no time, quando fazia uma requisição de GET para listar ele me retornava um objeto somente com o ID prenchido e com a data null. O Problema foi resolvido na classe Timecontroller e a DTO, o erro era devido a estar setando somente a data e nao os integrantes, e a data aparecia vazia pois estava enviando no formato String não no formato LocalDate.
30-Link Front x API feito com 100% de sucesso até o momento.
31-Teste de requisão POST e GET feitos pelo Insomnia.
32-No início do desenvolvimento desse commit tive que parar e voltar ao ultímo commit o código estava quebrando, e para poupar tempo retomei a ultima versão dele já que ainda estava no começo.  

8ºCommit.
33-Atualização no Front-end; Retirei o menu que tinha 7 opções de telas(um para cada método), e fiz uma única tela que irá, exibir mandar os parâmetros pra o front end e irá receber a reposta conforme exemplificado no README do desafio.
34-Criação da classe ServiceController que será responsável por processar os dados usando os métodos da classe ApiService.
35-Criação do primeiro endpoint timeDaData, implementandos os métodos da ApiService. Criação de uma resposta em JSON personalizada de acordo com o exemplo dado(Data & Integante).
36-No teste do primeiro endpoint deu erro 400(Bad Request) por conta do formato de dado mandando com parâmetro para a API, tive que tratar e trasformar no tipo LocalDateTime.
37-Criação do segundo endpoint integranteMaisUsado(JSON personalizado retornando jogador  mais usado e as vezes de uso desse integrante).
38-Teste de endpoint, da primeira vez retornou infinitamente o nome do integrante mais usado e travou o insomnia, personalizei a resposta JSON e resolveu o problema.
39-Criação do endpoint timeMaisUsado.(JSON retorna uma lista de nome dos integrantes que mais compõem times).
40-Teste de endpoint deu sucesso de primeira.(A aplicação do método só retorna um lista simples com apenas um dado).
41-Criação do endpoint funcaoMaisComum.(JSON retorna a funcao com o numero de vezes que se repete a função entre os integrantes).
42-Teste de endpoint deu sucesso de primeira.(A aplicação do método só retorna a função com o número de repetições dela, consegui reutilizar a response do endpoint integranteMaisUsado que retornava "nome" = "quantidade de escalação).

9ºCommit.
43-Criação do endpoint franquiaMaisFamosa(JSON retorna o nome da franquia mais famosa).
44-Teste de endpoint deu sucesso de primeira.(A aplicação do método só retorna o nome da franquia mais famosa).
45-Criação do endpoint contagemPorFranquia(JSON retorna uma lista de franquias com a quantidade de jogadores pertencentes a franquia).
46-Teste de endpoint deu sucesso de primeira.(A aplicação retorna um lista de franquias com a quantidade de jogadores pertencentes a franquia).
47-Criação do endpoint contagemPorFuncao(JSON retorna uma lista de funções com a quantidade de jogadores que fazem a função).
48-Teste de endpoint deu sucesso de primeira.(A aplicação retorna um lista de funções com a quantidade de jogadores que fazem a função).

10ºCommit.
49-Início da criação da tela para exibir o resultado dos métodos.
50-Layout da página concluida.
51-Início da construção do fetch com a API.
52-Teste do Fetch(Estava respondendo todos menos o timeDaData, pois estava mandando do front dois parametros de data também"Data inicial e Data Final", enquanto o método esperava receber apenas o parametro Data).
53-Mudei o estilo de fetch para prevenir erros de requisição, estava mandando requisição para todos os metodos de uma vez, e o timeDaData, estava sempre quebrando.
54-Criação de um arquivo markdown mostrando os teste de requisição feitos durante o desenvolvimento do desafio.
55-Passo a Passo para rodar o Sistema em um novo computador.

